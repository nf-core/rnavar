/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args    = Additional arguments appended to command in module.
        ext.args2   = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3   = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix  = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

}

// PREPARE GENOME

process {

    withName: 'NFCORE_RNAVAR.*CAT_FASTQ' {
        publishDir = [
            path: { "${params.outdir}/fastq" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_merged_fastq
        ]
    }

    withName: 'NFCORE_RNAVAR.*STAR_GENOMEGENERATE' {
        ext.args   = params.read_length ? "--sjdbOverhang ${params.read_length - 1}" : ''
    }

    withName: 'NFCORE_RNAVAR.*STAR_INDEXVERSION' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'NFCORE_RNAVAR.*PREPARE_GENOME:UNTAR' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'NFCORE_RNAVAR.*REMOVE_UNKNOWN_REGIONS' {
        ext.prefix = { "${meta.id}.exon" }
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'NFCORE_RNAVAR.*STAR_GENOMEGENERATE' {
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'NFCORE_RNAVAR.*GFFREAD' {
        ext.args    = '--keep-exon-attrs -F -T'
        publishDir  = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ?null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'NFCORE_RNAVAR.*GTF2BED' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'NFCORE_RNAVAR.*SAMTOOLS_FAIDX' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'NFCORE_RNAVAR.*GATK4_CREATESEQUENCEDICTIONARY' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }
}

// READ QC AND QC REPORT

process {

    withName: 'NFCORE_RNAVAR.*MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/reports"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: !params.skip_multiqc
        ]
    }

    withName: 'NFCORE_RNAVAR.*FASTQC' {
        ext.args    = '--quiet'
        publishDir  = [
            enabled: false
        ]
    }
}

// ALIGNMENT
process {

    // UMITOOLS_EXTRACT
    withName: 'NFCORE_RNAVAR.*UMITOOLS_EXTRACT' {
        ext.args   = { [
                params.umitools_extract_method                  ? "--extract-method=${params.umitools_extract_method}" : '',
                params.umitools_bc_pattern                      ? "--bc-pattern='${params.umitools_bc_pattern}'" : '',
                params.umitools_bc_pattern2 && !meta.single_end ? "--bc-pattern2='${params.umitools_bc_pattern2}'" : '',
                params.umitools_umi_separator                   ? "--umi-separator='${params.umitools_umi_separator}'" : ''
        ].join(' ').trim() }
    }

    // ALIGN_STAR

    withName: 'NFCORE_RNAVAR.*STAR_ALIGN' {
        ext.args   = { [
            '--outSAMtype BAM SortedByCoordinate',
            '--readFilesCommand zcat',
            params.save_unaligned ? '--outReadsUnmapped Fastx' : '',
            params.read_length ? "--sjdbOverhang ${params.read_length - 1}" : '',
            params.star_twopass ? '--twopassMode Basic' : '',
            params.star_max_memory_bamsort > 0 ? "--limitBAMsortRAM ${params.star_max_memory_bamsort}" : "",
            params.star_bins_bamsort > 0 ? "--outBAMsortingBinsN ${params.star_bins_bamsort}" : "",
            params.star_max_collapsed_junc > 0 ? "--limitOutSJcollapsed ${params.star_max_collapsed_junc}" : "",
            params.star_max_intron_size ? "--alignIntronMax ${params.star_max_intron_size}" : ""
            ].flatten().unique(false).join(' ').trim() }
        publishDir = [
            [
                path: { "${params.outdir}/reports/stats/${meta.id}/STAR_log" },
                mode: params.publish_dir_mode,
                pattern: '*.{out,tab}'
            ],
            [
                path: { "${params.outdir}/preprocessing/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                enabled: false
            ],
            [
                path: { "${params.outdir}/preprocessing/${meta.id}/unmapped" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_unaligned
            ]
        ]
    }
}

// POST ALIGNMENT AND PREPROCESSING BAM

process {

    withName: 'NFCORE_RNAVAR.*ALIGN_STAR:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix  = {"${meta.id}.aligned"}
        publishDir = [
            path: { "${params.outdir}/preprocessing/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.bam",
            enabled: params.save_align_intermeds
        ]
    }

    withName: 'NFCORE_RNAVAR.*ALIGN_STAR:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
        ext.args   = params.bam_csi_index ? '-c' : ''
        ext.prefix  = {"${meta.id}.aligned"}
        publishDir = [
            path: { "${params.outdir}/preprocessing/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{bai,csi}",
            enabled: params.save_align_intermeds
        ]
    }

    withName: 'NFCORE_RNAVAR.*GATK4_BEDTOINTERVALLIST' {
        publishDir  = [ enabled: false ]
    }

    withName: 'NFCORE_RNAVAR.*GATK4_INTERVALLISTTOOLS' {
        ext.args   = [
            '--SUBDIVISION_MODE BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW',
            '--UNIQUE true',
            '--SORT true',
            params.gatk_interval_scatter_count ? "--SCATTER_COUNT $params.gatk_interval_scatter_count" : ''
        ].join(' ').trim()
        publishDir  = [ enabled: false ]
    }

    withName: 'NFCORE_RNAVAR.*PICARD_MARKDUPLICATES' {
        ext.args   = [
            '--ASSUME_SORTED true',
            '--VALIDATION_STRINGENCY LENIENT',
            params.remove_duplicates ? '--REMOVE_DUPLICATES true' : ''
        ].join(' ').trim()
        ext.prefix  = {"${meta.id}.md"}
        publishDir  = [
            [
                path: { "${params.outdir}/preprocessing/${meta.id}" },
                mode: params.publish_dir_mode,
                enabled: true,
                pattern: "*.{bam,bai,csi}"
            ],
            [
                path: { "${params.outdir}/reports/stats/${meta.id}" },
                mode: params.publish_dir_mode,
                enabled: true,
                pattern: "*.{metrics}"
            ]
        ]
    }

    withName: 'NFCORE_RNAVAR.*BAM_MARKDUPLICATES_PICARD:SAMTOOLS_INDEX' {
        ext.args    = params.bam_csi_index ? '-c' : ''
        ext.prefix  = {"${meta.id}.md"}
        publishDir  = [
            path: { "${params.outdir}/preprocessing/${meta.id}" },
            mode: params.publish_dir_mode,
            enabled: true,
            pattern: "*.{bai,csi}"
        ]
    }

    withName: 'NFCORE_RNAVAR.*SPLITNCIGAR:GATK4_SPLITNCIGARREADS' {
        ext.args    =  '--create-output-bam-index false'
        ext.prefix  = { "${meta.id}.splitncigarreads" }
    }

    withName: 'NFCORE_RNAVAR.*SPLITNCIGAR:SAMTOOLS_INDEX' {
        ext.args    =  params.bam_csi_index ? '-c' : ''
    }

    withName: 'NFCORE_RNAVAR.*SPLITNCIGAR:*' {
        publishDir  = [ enabled: false ]
    }

    withName: 'NFCORE_RNAVAR.*SAMTOOLS_STATS|SAMTOOLS_FLAGSTAT|SAMTOOLS_IDXSTATS' {
            publishDir  = [
                path: { "${params.outdir}/reports/stats/${meta.id}" },
                mode: params.publish_dir_mode,
                enabled: !params.skip_multiqc,
                pattern: "*.{stats,flagstat}"
            ]
    }

}

// BASE RECALIBRATION PROCESS
process {

    withName: 'NFCORE_RNAVAR.*GATK4_BASERECALIBRATOR' {
        ext.args    =  '--use-original-qualities'
        publishDir  = [ enabled: false ]
    }

    withName: 'NFCORE_RNAVAR.*RECALIBRATE:APPLYBQSR' {
        ext.args    = [
            '--use-original-qualities',
            '--add-output-sam-program-record'
        ].join(' ').trim()
        ext.prefix  = {"${meta.id}.recal"}
        publishDir  = [
            path: { "${params.outdir}/preprocessing/${meta.id}" },
            mode: params.publish_dir_mode,
            enabled: true,
            pattern: "*.{bam}"
        ]
    }

    withName: 'NFCORE_RNAVAR.*RECALIBRATE:SAMTOOLS_INDEX' {
        ext.args    = params.bam_csi_index ? '-c' : ''
        ext.prefix  = {"${meta.id}.recal"}
        publishDir  = [
            path: { "${params.outdir}/preprocessing/${meta.id}" },
            mode: params.publish_dir_mode,
            enabled: true,
            pattern: "*.{bai,csi}"
        ]
    }
}


// VARIANT CALLING AND FILTERING

process {

    withName: 'NFCORE_RNAVAR.*GATK4_HAPLOTYPECALLER' {
        ext.args    = [
            '--dont-use-soft-clipped-bases',
            '--create-output-variant-index true',
            params.gatk_hc_call_conf ? "--standard-min-confidence-threshold-for-calling $params.gatk_hc_call_conf" : '',
            params.generate_gvcf ? "-ERC GVCF" : ""
        ].join(' ').trim()
        publishDir  = [ enabled: false ]
    }

    withName: 'NFCORE_RNAVAR.*GATK4_MERGEVCFS' {
        ext.prefix  = {"${meta.id}.haplotypecaller"}
        publishDir  = [
            path: { "${params.outdir}/variant_calling/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{vcf.gz}"
        ]
    }
    withName: 'NFCORE_RNAVAR.*GATK4_COMBINEGVCFS' {
        ext.prefix  = {"${meta.id}.haplotypecaller"}
        publishDir  = [
            path: { "${params.outdir}/variant_calling/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{vcf.gz}"
        ]
    }

    withName: 'NFCORE_RNAVAR.*TABIX_TABIX' {
        ext.args    = params.bam_csi_index ? '--csi' : ''
        ext.prefix  = {"${meta.id}.haplotypecaller"}
        publishDir  = [
            path: { "${params.outdir}/variant_calling/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{vcf.gz.tbi,vcf.gz.csi}"
        ]
    }

    withName: 'NFCORE_RNAVAR.*GATK4_VARIANTFILTRATION' {
        ext.prefix  = {"${meta.id}.haplotypecaller.filtered"}
        ext.args    = [
            params.gatk_vf_window_size ? "--cluster-window-size $params.gatk_vf_window_size" : '',
            params.gatk_vf_cluster_size ? "--cluster-size $params.gatk_vf_cluster_size" : '',
            params.gatk_vf_fs_filter ? "--filter-name \"FS\" --filter-expression \"FS > $params.gatk_vf_fs_filter\" " : '',
            params.gatk_vf_qd_filter ? "--filter-name \"QD\" --filter-expression \"QD < $params.gatk_vf_qd_filter\" " : '',
        ].join(' ').trim()
        publishDir  = [
            path: { "${params.outdir}/variant_calling/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{vcf.gz,vcf.gz.tbi}"
        ]
    }

    withName: 'NFCORE_RNAVAR.*GATK4_BEDTOINTERVALLIST' {
        ext.args = '--DROP_MISSING_CONTIGS TRUE'
    }
}
