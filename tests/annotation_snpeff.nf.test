nextflow_pipeline {

    name "Test pipeline"
    script "../main.nf"
    tag "pipeline"
    tag "pipeline_rnavar"

    test("-profile test --tools snpeff --download_cache") {

        when {
            params {
                input = "${projectDir}/tests/csv/1.0/vcf.csv"
                outdir = "$outputDir"
                download_cache = true
                tools = 'snpeff'
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            // stable_path: All files in ${params.outdir}/ with stable content
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore')
            // vcf_files: All vcf files
            def vcf_files  = getAllFilesFromDir(params.outdir, include: ['**/*.vcf.gz'])
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    // Number of successful tasks
                    workflow.trace.succeeded().size(),
                    // pipeline versions.yml file for multiqc from which Nextflow version is removed because we tests pipelines on multiple Nextflow versions
                    removeNextflowVersion("$outputDir/pipeline_info/nf_core_pipeline_software_mqc_versions.yml"),
                    // All stable path name, with a relative path
                    stable_name,
                    // All files with stable contents
                    stable_path,
                    // All vcf files
                    vcf_files.collect { file -> [file.getName(), path(file.toString()).vcf.variantsMD5] }
                ).match() }
            )
        }
    }

    test("-profile test --tools snpeff --snpeff_db na") {
        when {
            params {
                input = "${projectDir}/tests/csv/1.0/vcf.csv"
                outdir = "$outputDir"
                snpeff_cache = 's3://annotation-cache/snpeff_cache/'
                snpeff_db = "na"
                tools = 'snpeff'
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            // stable_path: All files in ${params.outdir}/ with stable content
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore')
            assertAll(
                { assert workflow.failed},
                { assert workflow.stdout.toString().contains("This path is not available within annotation-cache") }
            )
        }
    }
}
