nextflow_workflow {

    name "Test Subworkflow PREPARE_GENOME"
    script "../main.nf"
    workflow "PREPARE_GENOME"

    tag "subworkflows"
    tag "subworkflows_local"
    tag "subworkflows/prepare_genome"
    tag "bedtools/merge"
    tag "bedtools/stats"
    tag "gatk4/createsequencedictionary"
    tag "gffread"
    tag "gtf2bed"
    tag "samtools/faidx"
    tag "star/genomegenerate"
    tag "gunzip"
    tag "tabix/tabix"
    tag "tabix/bgziptabix"
    tag "untar"
    tag "star/indexversion"
    tag "remove_unknown_regions"

    test("only essentials") {
        when {
            params {
                params.gff = null
                params.gtf = "genome.gtf"
                params.exon_bed = null
                params.bcftools_annotations = null
                params.bcftools_annotations_tbi = null
                params.dbsnp = null
                params.dbsnp_tbi = null
                params.known_indels = null
                params.known_indels_tbi = null
            }

            workflow {
                """
                input[0] = file(params.pipelines_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                input[1] = []
                input[2] = []
                input[3] = Channel.value([[], []])
                input[4] = Channel.empty()
                input[5] = Channel.value([
                    [id:'gtf'],
                    file(params.pipelines_testdata_base_path + '/genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true)
                ])
                input[6] = Channel.empty()
                input[7] = Channel.empty()
                input[8] = Channel.empty()
                input[9] = Channel.empty()
                input[10] = Channel.empty()
                input[11] = Channel.empty()
                input[12] = Channel.empty()
                input[13] = "exon"
                input[14] = false
                input[15] = Channel.value(false)
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.collectEntries { key, val ->
                        if(key.matches("\\d+")) {
                            return null
                        } else if(key == "star_index") {
                            return [key, val.collect { [it[0], path(it[1]).list().collect { file(it.toString()).name }] }]
                        }
                        return [key,val]
                    }.findAll { it != null }
                ).match() }
            )
        }
    }

    test("all") {
        when {
            params {
                params.gff = null
                params.gtf = "genome.gtf"
                params.exon_bed = "exon.bed"
                params.bcftools_annotations = "annotations.vcf.gz"
                params.bcftools_annotations_tbi = null
                params.dbsnp = "dbsnp.vcf"
                params.dbsnp_tbi = null
                params.known_indels = "indels.vcf.gz"
                params.known_indels_tbi = null
            }

            workflow {
                """
                input[0] = file(params.pipelines_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                input[1] = file(params.pipelines_testdata_base_path + '/genomics/homo_sapiens/genome/genome.dict', checkIfExists: true)
                input[2] = file(params.pipelines_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                input[3] = Channel.value([
                    [id:'star'],
                    file(params.pipelines_testdata_base_path + '/genomics/homo_sapiens/genome/index/star/star.tar.gz', checkIfExists: true)
                ])
                input[4] = Channel.empty()
                input[5] = Channel.value([
                    [id:'gtf'],
                    file(params.pipelines_testdata_base_path + '/genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true)
                ])
                input[6] = Channel.value([
                    [id:'exon_bed'],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                ])
                input[7] = Channel.value(
                    file(params.modules_testdata_base_path + '/genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true)
                )
                input[8] = Channel.empty()
                input[9] = Channel.value(
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/vcf/test.rnaseq.vcf', checkIfExists: true)
                )
                input[10] = Channel.empty()
                input[11] = Channel.value(
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/vcf/test.rnaseq.vcf.gz', checkIfExists: true)
                )
                input[12] = Channel.empty()
                input[13] = "exon"
                input[14] = false
                input[15] = Channel.value(true)
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.collectEntries { key, val ->
                        if(key.matches("\\d+")) {
                            return null
                        } else if(key == "star_index") {
                            return [key, val.collect { [it[0], path(it[1]).list().collect { file(it.toString()).name }] }]
                        }
                        return [key,val]
                    }.findAll { it != null }
                ).match() }
            )
        }
    }
}
