nextflow_workflow {

    name "Test Subworkflow PREPARE_GENOME"
    script "../main.nf"
    workflow "PREPARE_GENOME"

    tag "subworkflows"
    tag "subworkflows_local"

    test("only essentials") {
        when {
            workflow {
                """
                input[0] = file(params.pipelines_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                input[1] = []
                input[2] = []
                input[3] = []
                input[4] = []
                input[5] = file(params.pipelines_testdata_base_path + '/genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true)
                input[6] = []
                input[7] = []
                input[8] = []
                input[9] = []
                input[10] = []
                input[11] = []
                input[12] = []
                input[13] = "exon"
                input[14] = false
                input[15] = Channel.value(false)
                """
            }
        }

        then {
            assert workflow.success
            assertAll(
                { assert snapshot(
                    workflow.out.collectEntries { key, val ->
                        if(key.matches("\\d+")) {
                            return null
                        } else if(key == "star_index") {
                            return [key, val.collect { [it[0], path(it[1]).list().collect { file(it.toString()).name }] }]
                        }
                        return [key,val]
                    }.findAll { it != null }
                ).match() }
            )
        }
    }

    test("all") {
        when {
            workflow {
                """
                input[0] = file(params.pipelines_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                input[1] = file(params.pipelines_testdata_base_path + '/genomics/homo_sapiens/genome/genome.dict', checkIfExists: true)
                input[2] = file(params.pipelines_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                input[3] = file(params.pipelines_testdata_base_path + '/genomics/homo_sapiens/genome/index/star/star.tar.gz', checkIfExists: true)
                input[4] = []
                input[5] = file(params.pipelines_testdata_base_path + '/genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true)
                input[6] = file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                input[7] = file(params.modules_testdata_base_path + '/genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true)
                input[8] = []
                input[9] = file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/vcf/test.rnaseq.vcf', checkIfExists: true)
                input[10] = []
                input[11] = file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/vcf/test.rnaseq.vcf.gz', checkIfExists: true)
                input[12] = file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/vcf/test.rnaseq.vcf.gz.tbi', checkIfExists: true)
                input[13] = "exon"
                input[14] = false
                input[15] = Channel.value(true)
                """
            }
        }

        then {
            assert workflow.success
            assertAll(
                { assert snapshot(
                    workflow.out.collectEntries { key, val ->
                        if(key.matches("\\d+")) {
                            return null
                        } else if(key == "star_index") {
                            return [key, val.collect { [it[0], path(it[1]).list().collect { file(it.toString()).name }] }]
                        }
                        return [key,val]
                    }.findAll { it != null }
                ).match() }
            )
        }
    }
}
