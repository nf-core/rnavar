nextflow_workflow {

    name "Test Subworkflow CRAM_QC_MOSDEPTH_SAMTOOLS"
    script "../main.nf"
    workflow "CRAM_QC_MOSDEPTH_SAMTOOLS"

    tag "subworkflows"
    tag "subworkflows_local"
    tag "subworkflows/cram_qc_mosdepth_samtools"
    tag "samtools/stats"
    tag "mosdepth"

    test("default") {
        when {

            workflow {
                """
                input[0] = Channel.of([
                    [id:'test'],
                    file(params.pipelines_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.rna.paired_end.sorted.bam', checkIfExists: true),
                    file(params.pipelines_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.rna.paired_end.sorted.bam.bai', checkIfExists: true)
                ])
                input[1] = Channel.value([
                    [id:'fasta'],
                    file(params.pipelines_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
                input[2] = Channel.value([
                    [id:'intervals'],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.collectEntries { key, val ->
                        if(key.matches("\\d+")) {
                            return null
                        }
                        return [key,val]
                    }.findAll { it != null }
                ).match() }
            )
        }
    }
}
